generator client {
  provider = "prisma-client-js"
  engineType = "binary"
  output   = "./generated/client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Permission {
  id        String   @id @default(cuid())
  key       String   @unique
  name      String?
  label     String
  plugin    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rolePerms RolePermission[]
  userPerms UserPermission[]
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  passwordHash  String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userRoles     UserRole[]
  userPerms     UserPermission[]
  contexts      UserContext[]
  auditActorLogs AuditLog[] @relation("AuditActor")
  auditTargetLogs AuditLog[] @relation("AuditTargetUser")
  passwordResetTokens PasswordResetToken[]
}

model Role {
  id          String   @id @default(cuid())
  key         String   @unique
  name        String
  contextType String   // e.g., 'team', 'org'
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  rolePerms   RolePermission[]
  userRoles   UserRole[]
}

model Context {
  id        String   @id
  type      String
  name      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userContexts UserContext[]
  userRoles    UserRole[]
  rolePerms    RolePermission[]
  userPerms    UserPermission[]
  auditLogs    AuditLog[]
}

model UserRole {
  id        String   @id @default(cuid())
  userId    String
  roleId    String
  contextId String?  // null = global
  contextType String?  // e.g., 'team' for type-wide when contextId is null
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User    @relation(fields: [userId], references: [id])
  role   Role    @relation(fields: [roleId], references: [id])
  context Context? @relation(fields: [contextId], references: [id])

  @@index([userId, contextId])
  @@index([roleId])
}

model RolePermission {
  id           String   @id @default(cuid())
  roleId       String
  permissionId String
  contextId    String?  // null = global
  contextType  String?  // e.g., 'team' for type-wide when contextId is null
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  role       Role       @relation(fields: [roleId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])
  context    Context?   @relation(fields: [contextId], references: [id])

  @@unique([roleId, permissionId, contextId])
  @@index([roleId, contextId])
  @@index([roleId, contextType, contextId])
}

model UserPermission {
  id           String   @id @default(cuid())
  userId       String
  permissionId String
  contextId    String?  // null = global
  contextType  String?  // e.g., 'team' for type-wide when contextId is null
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user       User       @relation(fields: [userId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])
  context    Context?   @relation(fields: [contextId], references: [id])

  @@unique([userId, permissionId, contextId])
  @@index([userId, contextId])
  @@index([userId, contextType, contextId])
}

model UserContext {
  id        String   @id @default(cuid())
  userId    String
  contextId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  context Context @relation(fields: [contextId], references: [id])

  @@unique([userId, contextId])
}

model AuditLog {
  id            String   @id @default(cuid())
  actorId       String?
  targetUserId  String?
  action        String
  contextId     String?
  success       Boolean
  requestId     String?
  ip            String?
  userAgent     String?
  resourceType  String?
  resourceId    String?
  plugin        String?
  error         String?
  metadata      Json?
  createdAt     DateTime @default(now())

  actor   User?    @relation("AuditActor", fields: [actorId], references: [id])
  target  User?    @relation("AuditTargetUser", fields: [targetUserId], references: [id])
  context Context? @relation(fields: [contextId], references: [id])

  @@index([action, createdAt])
  @@index([actorId, createdAt])
  @@index([targetUserId, createdAt])
  @@index([contextId, createdAt])
}

model RevokedToken {
  id        String   @id @default(cuid())
  jti       String   @unique
  userId    String?
  createdAt DateTime @default(now())
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  @@index([userId])
}


